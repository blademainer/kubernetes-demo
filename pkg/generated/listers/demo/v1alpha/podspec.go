/*
Copyright 2019 blademainer.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "github.com/blademainer/kubernetes-demo/pkg/apis/demo/v1alpha"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodSpecLister helps list PodSpecs.
type PodSpecLister interface {
	// List lists all PodSpecs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha.PodSpec, err error)
	// PodSpecs returns an object that can list and get PodSpecs.
	PodSpecs(namespace string) PodSpecNamespaceLister
	PodSpecListerExpansion
}

// podSpecLister implements the PodSpecLister interface.
type podSpecLister struct {
	indexer cache.Indexer
}

// NewPodSpecLister returns a new PodSpecLister.
func NewPodSpecLister(indexer cache.Indexer) PodSpecLister {
	return &podSpecLister{indexer: indexer}
}

// List lists all PodSpecs in the indexer.
func (s *podSpecLister) List(selector labels.Selector) (ret []*v1alpha.PodSpec, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.PodSpec))
	})
	return ret, err
}

// PodSpecs returns an object that can list and get PodSpecs.
func (s *podSpecLister) PodSpecs(namespace string) PodSpecNamespaceLister {
	return podSpecNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodSpecNamespaceLister helps list and get PodSpecs.
type PodSpecNamespaceLister interface {
	// List lists all PodSpecs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha.PodSpec, err error)
	// Get retrieves the PodSpec from the indexer for a given namespace and name.
	Get(name string) (*v1alpha.PodSpec, error)
	PodSpecNamespaceListerExpansion
}

// podSpecNamespaceLister implements the PodSpecNamespaceLister
// interface.
type podSpecNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodSpecs in the indexer for a given namespace.
func (s podSpecNamespaceLister) List(selector labels.Selector) (ret []*v1alpha.PodSpec, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.PodSpec))
	})
	return ret, err
}

// Get retrieves the PodSpec from the indexer for a given namespace and name.
func (s podSpecNamespaceLister) Get(name string) (*v1alpha.PodSpec, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("podspec"), name)
	}
	return obj.(*v1alpha.PodSpec), nil
}
